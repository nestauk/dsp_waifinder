import * as _ from 'lamb';
import {derived, writable} from 'svelte/store';

import {_dataset} from 'app/stores/dataset';

export const getAugmentedOrg = ({placesById, orgTypes, orgsById}, id) => {
	if (id) {
		const {place_id, types, ...others} = orgsById[id];
		return {
			place_id,
			place: placesById[place_id],
			types: _.map(types, typeId => orgTypes[typeId]),
			...others
		}
	}
	return null;
};

export const _focusedOrgId = writable(null);
export const _focusedOrg = derived(
	[_dataset, _focusedOrgId],
	([dataset, focusedOrgId]) => getAugmentedOrg(dataset, focusedOrgId)
);

export const _focusedMarkerId = writable(null);
export const _focusedMarker = derived(
	[_dataset, _focusedMarkerId],
	([dataset, focusedMarkerId]) => getAugmentedOrg(dataset, focusedMarkerId)
);

export const clearFocusedMarker = () => {
	_focusedMarkerId.set(null);
}

export const _selectedMarkerId = writable(null);
export const _selectedMarker = derived(
	[_dataset, _selectedMarkerId],
	([dataset, selectedMarkerId]) => getAugmentedOrg(dataset, selectedMarkerId)
);

export const clearSelectedMarker = () => {
	_selectedMarkerId.set(null);
}
