import * as _ from 'lamb';
import {derived, writable, get} from 'svelte/store';

import {_dataset} from 'app/stores/dataset';

export const _focusedOrgId = writable(null);
export const _focusedOrg = derived(
	[_dataset, _focusedOrgId],
	([dataset, focusedOrgId]) => dataset.orgsById[focusedOrgId]
);

export const _hero = writable(null);

export const clearHero = () => {
	_hero.set(null);
}

const setHero = (id, isPinned) => {
	let hero;
	const orgsById = get(_dataset).orgsById;
	const org = orgsById[id];
	if (org) {
		hero = {
			isPinned,
			org
		};
	}
	_hero.set(hero);
};

export const setFocusedHero = id => {
	!get(_hero)?.isPinned && setHero(id, false);
};

export const setSelectedHero = id => {
	const hero = get(_hero);
	const isNotPinned = hero?.id === id && hero.isPinned;
	setHero(id, !isNotPinned);
};

export const clearInteractionStores = () => {
	_focusedOrgId.set(null);
	_hero.update(hero => hero?.isPinned ? hero : null);
}

export const defaultFooterText = 'Click on background to dismiss';

export const _isCursorOnMap = writable();

export const setIsCursorOnMap = () => _isCursorOnMap.set(true);
export const clearIsCursorOnMap = () => _isCursorOnMap.set(false);
