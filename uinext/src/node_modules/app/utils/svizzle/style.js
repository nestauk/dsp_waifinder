import {isIterableNotEmpty} from '@svizzle/utils';
import * as _ from 'lamb';

import {makeTrimmedSplitBy} from './utils';

const parseCssText = _.pipe([
	_.splitBy(';'),
	_.filterWith(isIterableNotEmpty),
	_.mapWith(makeTrimmedSplitBy(':'))
]);

export const getStylesheet = href => _.find(
	[...document.styleSheets],
	_.hasKeyValue('href', href)
);

export const makeGetStyleRulesObj = selectorRegex => _.pipe([
	_.filterWith(_.pipe([
		_.getKey('selectorText'),
		makeTrimmedSplitBy(','),
		_.some(selectorRegex.test.bind(selectorRegex))
	])),
	_.mapWith(_.collect([
		_.getKey('selectorText'),
		_.pipe([
			_.getPath('style.cssText'),
			parseCssText,
			_.fromPairs
		])
	])),
	_.fromPairs
]);

export const getAllStylesBySelector = _.pipe([
	_.mapWith(_.collect([
		_.getKey('selectorText'),
		_.getKey('style')
	])),
	_.fromPairs
]);

export const setStyleRules = (targetRules, srcRules) => {
	const selectors = _.keys(srcRules)
	selectors.forEach(selector => {
		if (selector in targetRules) {
			const style = srcRules[selector];
			const properties = _.keys(style);
			properties.forEach(prop => {
				targetRules[selector].setProperty(prop, style[prop])
			});
		}
	})
}
